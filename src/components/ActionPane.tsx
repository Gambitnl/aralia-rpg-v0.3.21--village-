/**
 * @file ActionPane.tsx
 * This component displays available actions to the player, such as
 * interacting with NPCs or items, and asking the Oracle.
 * It now also displays custom actions generated by Gemini after a "Look Around".
 * The "Save Game" button is now always visible.
 * Compass navigation has been moved to CompassPane.tsx.
 * The dev-specific main menu button is changed to "Dev Menu".
 * A "Journal" button has been added.
 * A "Glossary" button has been added.
 */
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Location, Action, NPC, Item } from '../types'; // Path relative to src/components/

interface ActionPaneProps {
  currentLocation: Location; 
  npcsInLocation: NPC[];
  itemsInLocation: Item[];
  onAction: (action: Action) => void;
  disabled: boolean; 
  geminiGeneratedActions: Action[] | null; 
  isDevDummyActive: boolean;
  unreadDiscoveryCount: number; 
  hasNewRateLimitError: boolean;
}

/**
 * ActionButton component (retained for non-compass actions).
 * A styled button for player actions.
 */
const ActionButton: React.FC<{
  action: Action;
  onClick: (action: Action) => void;
  disabled: boolean;
  className?: string;
  isGeminiAction?: boolean; 
  badgeCount?: number; // Optional badge count for notifications
  hasNotification?: boolean; // Optional simple dot notification
}> = ({ action, onClick, disabled, className = '', isGeminiAction = false, badgeCount, hasNotification }) => {
  const baseClasses = "font-semibold py-3 px-6 rounded-lg shadow-md transition-all duration-150 ease-in-out transform focus:outline-none focus:ring-2 focus:ring-opacity-75 relative"; // Added relative for badge positioning
  
  let colorClasses = "bg-sky-600 hover:bg-sky-500 disabled:bg-gray-600 text-white focus:ring-sky-400"; // Default
  switch (action.type) {
    case 'toggle_party_overlay':
      colorClasses = "bg-green-600 hover:bg-green-500 text-white focus:ring-green-400";
      break;
    case 'save_game':
      colorClasses = "bg-yellow-500 hover:bg-yellow-400 disabled:bg-gray-600 text-gray-900 focus:ring-yellow-300";
      break;
    case 'go_to_main_menu':
      colorClasses = "bg-red-600 hover:bg-red-500 disabled:bg-gray-600 text-white focus:ring-red-400";
      break;
    case 'toggle_dev_menu':
      colorClasses = "bg-orange-500 hover:bg-orange-400 disabled:bg-gray-600 text-white focus:ring-orange-300";
      break;
    case 'gemini_custom_action':
      colorClasses = "bg-teal-600 hover:bg-teal-500 disabled:bg-gray-600 text-white focus:ring-teal-400";
      break;
    case 'ask_oracle': 
    case 'custom': 
       if (action.label.toLowerCase().includes('oracle')) {
        colorClasses = "bg-purple-600 hover:bg-purple-500 disabled:bg-gray-600 text-white focus:ring-purple-400";
       }
      break;
    case 'TOGGLE_DISCOVERY_LOG':
       colorClasses = "bg-lime-600 hover:bg-lime-500 disabled:bg-gray-600 text-white focus:ring-lime-400";
       break;
    case 'TOGGLE_LOGBOOK':
       colorClasses = "bg-amber-600 hover:bg-amber-500 disabled:bg-gray-600 text-white focus:ring-amber-400";
       break;
    case 'TOGGLE_GLOSSARY_VISIBILITY': // Style for Glossary button
       colorClasses = "bg-indigo-600 hover:bg-indigo-500 disabled:bg-gray-600 text-white focus:ring-indigo-400";
       break;
  }
  if (isGeminiAction && action.type !== 'gemini_custom_action') { 
      colorClasses = "bg-teal-600 hover:bg-teal-500 disabled:bg-gray-600 text-white focus:ring-teal-400";
  }
  
  return (
    <motion.button
      {...{
        layout: true,
        initial: { opacity: 0, scale: 0.8 },
        animate: { opacity: 1, scale: 1 },
        exit: { opacity: 0, scale: 0.8 },
        transition: { type: 'spring', stiffness: 300, damping: 20 },
        whileHover: { scale: 1.05 },
        whileTap: { scale: 0.95 },
      } as any}
      onClick={() => onClick(action)}
      disabled={disabled}
      className={`${baseClasses} ${colorClasses} ${className}`}
      aria-label={action.label}
    >
      {action.label}
      {badgeCount !== undefined && badgeCount > 0 && (
        <span 
            className="absolute -top-2 -right-2 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-red-100 bg-red-600 rounded-full"
            aria-hidden="true" 
        >
            {badgeCount > 99 ? '99+' : badgeCount}
        </span>
      )}
      {hasNotification && (
        <span className="absolute -top-1 -right-1 h-3 w-3 rounded-full bg-red-500 border-2 border-gray-800 animate-pulse"></span>
      )}
    </motion.button>
  );
};

/**
 * ActionPane component.
 * Displays available actions to the player based on their current location,
 * present NPCs, and available items. Also includes a special "Ask the Oracle" action.
 */
const ActionPane: React.FC<ActionPaneProps> = ({
  currentLocation,
  npcsInLocation,
  itemsInLocation,
  onAction,
  disabled,
  geminiGeneratedActions,
  isDevDummyActive,
  unreadDiscoveryCount,
  hasNewRateLimitError,
}) => {
  const [isOracleInputVisible, setIsOracleInputVisible] = useState(false);
  const [oracleQuery, setOracleQuery] = useState('');

  const generalActions: Action[] = [];
  
  if (!currentLocation.id.startsWith('coord_')) {
    npcsInLocation.forEach((npc) => {
      generalActions.push({
        type: 'talk',
        label: `Talk to ${npc.name}`,
        targetId: npc.id,
      });
    });
  }
  
  if (!currentLocation.id.startsWith('coord_')) {
    itemsInLocation.forEach((item) => {
      generalActions.push({
        type: 'take_item',
        label: `Take ${item.name}`,
        targetId: item.id,
      });
    });
  }
  
  if (currentLocation.exits) {
    Object.entries(currentLocation.exits).forEach(([direction, locationId]) => {
      if (!['North', 'South', 'East', 'West', 'NorthEast', 'NorthWest', 'SouthEast', 'SouthWest'].includes(direction)) { 
        generalActions.push({ type: 'move', label: `Go ${direction}`, targetId: locationId });
      }
    });
  }


  const handleAskOracleClick = () => {
    setIsOracleInputVisible(true);
  };

  const handleOracleQueryChange = (
    event: React.ChangeEvent<HTMLInputElement>,
  ) => {
    setOracleQuery(event.target.value);
  };

  const handleOracleSubmit = () => {
    if (oracleQuery.trim() && !disabled) {
      onAction({
        type: 'ask_oracle',
        label: 'Ask the Oracle',
        payload: { query: oracleQuery.trim() },
      });
      setOracleQuery('');
      setIsOracleInputVisible(false);
    }
  };

  const handleOracleCancel = () => {
    setOracleQuery('');
    setIsOracleInputVisible(false);
  };
  
  return (
    <div className="bg-gray-800 p-6 rounded-lg shadow-xl border border-gray-700 flex-grow">
      <h2 className="text-2xl font-bold text-amber-400 mb-4 border-b-2 border-amber-500 pb-2">
        Interactions & System
      </h2>
      
      {/* System and Utility Buttons */}
      <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 mb-4">
        <AnimatePresence>
          {!isOracleInputVisible && (
            <motion.div 
              {...{
                layout: true,
                initial: { opacity: 0, y: -20 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: -20 },
              } as any}
              className="sm:col-span-3"
            >
              <ActionButton
                action={{ type: 'ask_oracle', label: 'Ask the Oracle' }}
                onClick={handleAskOracleClick}
                disabled={disabled}
                className="w-full"
              />
            </motion.div>
          )}
        </AnimatePresence>
        
        <ActionButton
            action={{ type: 'TOGGLE_DISCOVERY_LOG', label: 'Journal' }}
            onClick={onAction}
            disabled={disabled || isOracleInputVisible}
            badgeCount={unreadDiscoveryCount}
        />
        <ActionButton
            action={{ type: 'TOGGLE_LOGBOOK', label: 'Logbook' }}
            onClick={onAction}
            disabled={disabled || isOracleInputVisible}
        />
        <ActionButton
            action={{ type: 'TOGGLE_GLOSSARY_VISIBILITY', label: 'Glossary' }}
            onClick={onAction}
            disabled={disabled || isOracleInputVisible}
        />
        <ActionButton
            action={{ type: 'toggle_party_overlay', label: 'Party' }}
            onClick={onAction}
            disabled={disabled || isOracleInputVisible}
        />
        <ActionButton
            action={{ type: 'save_game', label: 'Save Game' }}
            onClick={onAction}
            disabled={disabled || isOracleInputVisible}
        />
        
        {isDevDummyActive ? (
            <ActionButton
                action={{ type: 'toggle_dev_menu', label: 'Dev Menu' }}
                onClick={onAction}
                disabled={disabled || isOracleInputVisible}
                hasNotification={hasNewRateLimitError}
            />
        ) : (
            <ActionButton
                action={{ type: 'go_to_main_menu', label: 'Main Menu (Save & Exit)' }}
                onClick={onAction}
                disabled={disabled || isOracleInputVisible}
            />
        )}
      </div>

      <AnimatePresence>
        {isOracleInputVisible && (
          <motion.div
            {...{
              layout: true,
              initial: { opacity: 0, height: 0, y: -20 },
              animate: { opacity: 1, height: 'auto', y: 0 },
              exit: { opacity: 0, height: 0, y: -20 },
              transition: { duration: 0.3, ease: 'easeInOut' },
            } as any}
            className="mb-4 p-4 border border-purple-500 rounded-lg bg-gray-700/50 overflow-hidden"
          >
            <label
              htmlFor="oracleQueryInput"
              className="block text-sm font-medium text-purple-300 mb-1"
            >
              What wisdom do you seek from the Oracle?
            </label>
            <input
              type="text"
              id="oracleQueryInput"
              value={oracleQuery}
              onChange={handleOracleQueryChange}
              placeholder="e.g., What fate awaits me in the ruins?"
              className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-md text-gray-200 focus:ring-1 focus:ring-purple-500 focus:border-purple-500 outline-none"
              disabled={disabled}
              aria-label="Your question for the Oracle"
              onKeyDown={(e) => e.key === 'Enter' && handleOracleSubmit()}
            />
            <div className="mt-3 flex gap-2">
              <button
                onClick={handleOracleSubmit}
                disabled={disabled || !oracleQuery.trim()}
                className="flex-grow bg-green-600 hover:bg-green-500 disabled:bg-gray-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm transition-colors"
              >
                Submit Query
              </button>
              <button
                onClick={handleOracleCancel}
                disabled={disabled}
                className="flex-grow bg-gray-500 hover:bg-gray-400 text-white font-semibold py-2 px-4 rounded-md shadow-sm transition-colors"
              >
                Cancel
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <AnimatePresence>
        {geminiGeneratedActions && geminiGeneratedActions.length > 0 && !isOracleInputVisible && (
          <motion.div 
            {...{
              layout: true, 
              initial: { opacity: 0 },
              animate: { opacity: 1 },
            } as any}
            className="mt-4 pt-4 border-t border-gray-600"
          >
              <h3 className="text-lg text-sky-300 mb-2 text-center">Specific Interactions</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
              {geminiGeneratedActions.map((action, index) => (
                  <ActionButton
                  key={`gemini-action-${index}-${action.label}`}
                  action={action}
                  onClick={onAction}
                  disabled={disabled || isOracleInputVisible}
                  isGeminiAction={true} 
                  />
              ))}
              </div>
          </motion.div>
        )}
      </AnimatePresence>

      <div className={`mt-4 ${geminiGeneratedActions && geminiGeneratedActions.length > 0 ? 'pt-4 border-t border-gray-600' : ''}`}>
        <AnimatePresence>
        {generalActions.length > 0 && !isOracleInputVisible && (
          <motion.div {...{layout: true} as any}>
            <h3 className="text-lg text-sky-300 mb-2 text-center">General Actions</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
              {generalActions.map((action) => (
                <ActionButton
                  key={action.label + (action.targetId || '')}
                  action={action}
                  onClick={onAction}
                  disabled={disabled || isOracleInputVisible}
                />
              ))}
            </div>
          </motion.div>
        )}
        </AnimatePresence>
      </div>
      {(generalActions.length === 0 && (!geminiGeneratedActions || geminiGeneratedActions.length === 0) && !isOracleInputVisible) && (
        <p className="text-gray-500 italic text-center mt-4">No specific actions available here beyond navigation.</p>
      )}
    </div>
  );
};

export default ActionPane;